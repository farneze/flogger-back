generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model consumed {
  id        Int      @id @default(autoincrement())
  iddish    Int
  quantity  Int      @db.SmallInt
  eatenat   DateTime @db.Timestamptz(6)
  createdat DateTime @default(now()) @db.Timestamptz(6)
  dish      dish     @relation(fields: [iddish], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model dish {
  id           Int            @id @default(autoincrement())
  idusers      Int
  name         String         @db.VarChar(100)
  description  String?        @db.VarChar
  createdat    DateTime       @default(now()) @db.Timestamptz(6)
  updatedat    DateTime?      @db.Timestamptz(6)
  consumed     consumed[]
  users        users          @relation(fields: [idusers], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dishhasfoods dishhasfoods[]
}

model dishhasfoods {
  id        Int      @id @default(autoincrement())
  iddish    Int
  idfood    Int
  quantity  Int      @db.SmallInt
  createdat DateTime @default(now()) @db.Timestamptz(6)
  dish      dish     @relation(fields: [iddish], references: [id], onDelete: NoAction, onUpdate: NoAction)
  foods     foods    @relation(fields: [idfood], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model foods {
  id              Int              @id @default(autoincrement())
  idusers         Int
  name            String           @db.VarChar(100)
  description     String?          @db.VarChar
  image           String?          @db.VarChar
  calories        Float            @db.Real
  carbohydrates   Float            @db.Real
  protein         Float            @db.Real
  fat             Float            @db.Real
  sugar           Float            @db.Real
  portiontype     portion_type
  constructortype constructor_type
  portionquantity Int              @db.SmallInt
  price           Int              @db.SmallInt
  unit            Int              @db.SmallInt
  createdat       DateTime         @default(now()) @db.Timestamptz(6)
  updatedat       DateTime?        @db.Timestamptz(6)
  dishhasfoods    dishhasfoods[]
  users           users            @relation(fields: [idusers], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id        Int       @id @default(autoincrement())
  firstname String?   @db.VarChar(50)
  lastname  String?   @db.VarChar(50)
  nickname  String    @db.VarChar(20)
  age       Int       @db.SmallInt
  email     String    @unique @db.VarChar(50)
  hash      String    @db.VarChar(100)
  lastlogin DateTime? @db.Timestamptz(6)
  createdat DateTime  @default(now()) @db.Timestamptz(6)
  updatedat DateTime? @db.Timestamptz(6)
  dish      dish[]
  foods     foods[]
}

enum constructor_type {
  builder
  regulatory
  energy_foods
}

enum portion_type {
  unit
  kilograms
  grams
  liter
  mililiter
}
