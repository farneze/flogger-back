generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["flogger", "main"]
}

model consumed {
  id        Int      @id @default(autoincrement())
  iduser    Int
  iddish    Int
  quantity  Int      @db.SmallInt
  eatenat   DateTime @db.Timestamptz(6)
  createdat DateTime @default(now()) @db.Timestamptz(6)
  dish      dish     @relation(fields: [iddish], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users    @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("flogger")
}

model dish {
  id           Int            @id @default(autoincrement())
  iduser       Int
  name         String         @db.VarChar(100)
  description  String?        @db.VarChar
  createdat    DateTime       @default(now()) @db.Timestamptz(6)
  updatedat    DateTime?      @db.Timestamptz(6)
  consumed     consumed[]
  users        users          @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dishhasfoods dishhasfoods[]

  @@schema("flogger")
}

model dishhasfoods {
  id        Int      @id @default(autoincrement())
  iddish    Int
  idfood    Int
  quantity  Int      @db.SmallInt
  createdat DateTime @default(now()) @db.Timestamptz(6)
  dish      dish     @relation(fields: [iddish], references: [id], onDelete: NoAction, onUpdate: NoAction)
  foods     foods    @relation(fields: [idfood], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("flogger")
}

model foods {
  id              Int              @id @default(autoincrement())
  iduser          Int
  name            String           @db.VarChar(100)
  description     String?          @db.VarChar
  image           String?          @db.VarChar
  calories        Float            @db.Real
  carbohydrates   Float            @db.Real
  protein         Float            @db.Real
  fat             Float            @db.Real
  sugar           Float            @db.Real
  portiontype     portion_type
  constructortype constructor_type
  portionquantity Decimal          @db.Decimal
  price           Decimal?         @db.Decimal
  unit            Int              @db.SmallInt
  createdat       DateTime         @default(now()) @db.Timestamptz(6)
  updatedat       DateTime?        @db.Timestamptz(6)
  dishhasfoods    dishhasfoods[]
  users           users            @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("flogger")
}

model goal {
  id     Int      @id @default(autoincrement())
  iduser Int
  goal   Decimal  @db.Decimal
  date   DateTime @db.Timestamptz(6)
  users  users    @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("flogger")
}

model weight {
  id     Int      @id @default(autoincrement())
  iduser Int
  weight Decimal  @db.Decimal
  date   DateTime @db.Timestamptz(6)
  users  users    @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("flogger")
}

model users {
  id        Int        @id @default(autoincrement())
  firstname String?    @db.VarChar(50)
  lastname  String?    @db.VarChar(50)
  nickname  String     @db.VarChar(20)
  email     String?    @db.VarChar(50)
  login     String     @unique @db.VarChar(20)
  hash      String     @db.VarChar(100)
  birthdate DateTime?  @db.Timestamptz(6)
  lastlogin DateTime?  @db.Timestamptz(6)
  createdat DateTime   @default(now()) @db.Timestamptz(6)
  updatedat DateTime?  @db.Timestamptz(6)
  consumed  consumed[]
  dish      dish[]
  foods     foods[]
  goal      goal[]
  weight    weight[]

  @@schema("main")
}

enum constructor_type {
  builder
  regulatory
  energy_foods

  @@schema("flogger")
}

enum portion_type {
  unit
  grams
  mililiter

  @@schema("flogger")
}
